{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/TodoApp/TodoApp.js","App.js","index.js"],"names":["TodoItem","title","id","completed","toggleChecked","destroyItem","className","type","checked","onChange","htmlFor","onClick","TodoList","todos","map","todo","key","TodoApp","state","newTodoTitle","filterForTodos","isToggleAll","handleFilterForTodos","event","filter","target","innerText","setState","handleTodoTitle","value","handleFormSubmit","preventDefault","trim","prev","newTodo","Date","todoId","toggleAllTodos","countOfcompletedTodos","length","destoyCompletedItems","this","onSubmit","placeholder","href","undefined","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e249b352.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoItem = ({ title, id, completed, toggleChecked, destroyItem }) => (\n  <li\n    className={\n      completed\n        ? 'completed'\n        : 'view'\n    }\n  >\n    <div>\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        id={id}\n        checked={completed}\n        onChange={() => toggleChecked(id)}\n      />\n      <label htmlFor={id}>{title}</label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={() => destroyItem(id)}\n      />\n    </div>\n    <input type=\"text\" className=\"edit\" />\n  </li>\n);\n\nexport default TodoItem;\n\nTodoItem.propTypes = PropTypes.shape({\n  title: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  completed: PropTypes.bool.isRequired,\n  toggleChecked: PropTypes.func.isRequired,\n  destroyItem: PropTypes.func.isRequired,\n}).isRequired;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from '../TodoItem/TodoItem';\n\nconst TodoList = ({ todos, toggleChecked, destroyItem }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        title={todo.title}\n        id={todo.id}\n        completed={todo.completed}\n        toggleChecked={toggleChecked}\n        destroyItem={destroyItem}\n      />\n    ))}\n  </ul>\n);\n\nexport default TodoList;\n\nTodoList.propTypes = {\n  toggleChecked: PropTypes.func.isRequired,\n  destroyItem: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React from 'react';\nimport TodoList from '../TodoList/TodoList';\n\nclass TodoApp extends React.Component {\n  state = {\n    todos: [],\n    newTodoTitle: '',\n    filterForTodos: 'All',\n    isToggleAll: false,\n  }\n\n  handleFilterForTodos = (event) => {\n    const filter = event.target.innerText;\n\n    this.setState({\n      filterForTodos: filter,\n    });\n  }\n\n  handleTodoTitle = (event) => {\n    this.setState({\n      newTodoTitle: event.target.value,\n    });\n  }\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    if (this.state.newTodoTitle.trim() === '') {\n      return;\n    }\n\n    this.setState((prev) => {\n      const newTodo = {\n        id: +new Date(),\n        title: prev.newTodoTitle,\n        completed: false,\n      };\n\n      return {\n        todos: [...prev.todos, newTodo],\n        newTodoTitle: '',\n      };\n    });\n  };\n\n  toggleChecked = (todoId) => {\n    this.setState(prev => ({\n      todos: prev.todos.map((todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return {\n          ...todo,\n        };\n      }),\n    }));\n  }\n\n  toggleAllTodos = (event) => {\n    const countOfcompletedTodos = this.state.todos\n      .filter(todo => todo.completed).length;\n\n    if (countOfcompletedTodos < this.state.todos.length) {\n      this.setState(prev => ({\n        isToggleAll: true,\n        todos: prev.todos.map(todo => ({\n          ...todo,\n          completed: true,\n        })),\n      }));\n    }\n\n    if (countOfcompletedTodos === this.state.todos.length) {\n      this.setState(prev => ({\n        isToggleAll: false,\n        todos: prev.todos.map(todo => ({\n          ...todo,\n          completed: false,\n        })),\n      }));\n    }\n  }\n\n  destroyItem = (todoId) => {\n    this.setState(prev => ({\n      todos: prev.todos.filter(todo => todo.id !== todoId),\n    }));\n  }\n\n  destoyCompletedItems = () => {\n    this.setState(prev => ({\n      todos: prev.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  render() {\n    let todos = [...this.state.todos];\n    const { filterForTodos, newTodoTitle, isToggleAll } = this.state;\n\n    if (filterForTodos === 'Active') {\n      todos = this.state.todos.filter(todo => !todo.completed);\n    }\n\n    if (filterForTodos === 'Completed') {\n      todos = this.state.todos.filter(todo => todo.completed);\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <form\n            onSubmit={this.handleFormSubmit}\n          >\n            <input\n              type=\"text\"\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={newTodoTitle}\n              onChange={this.handleTodoTitle}\n            />\n          </form>\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={isToggleAll}\n            onChange={this.toggleAllTodos}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <TodoList\n            todos={todos}\n            toggleChecked={this.toggleChecked}\n            destroyItem={this.destroyItem}\n          />\n        </section>\n\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {`${this.state.todos\n              .filter(todo => !todo.completed).length} items left`}\n          </span>\n\n          <ul className=\"filters\">\n            <li>\n              <a\n                href=\"#/all\"\n                className={\n                  this.state.filterForTodos === 'All'\n                    ? 'selected'\n                    : undefined\n                }\n                onClick={this.handleFilterForTodos}\n              >\n                All\n              </a>\n            </li>\n\n            <li>\n              <a\n                href=\"#/active\"\n                className={\n                  this.state.filterForTodos === 'Active'\n                    ? 'selected'\n                    : undefined\n                }\n                onClick={this.handleFilterForTodos}\n              >\n                Active\n              </a>\n            </li>\n\n            <li>\n              <a\n                href=\"#/completed\"\n                className={\n                  this.state.filterForTodos === 'Completed'\n                    ? 'selected'\n                    : undefined\n                }\n                onClick={this.handleFilterForTodos}\n              >\n                Completed\n              </a>\n            </li>\n          </ul>\n          {this.state.todos.filter(todo => todo.completed).length > 0\n            ? (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={this.destoyCompletedItems}\n              >\n                Clear completed\n              </button>\n            )\n            : ''\n          }\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default TodoApp;\n","import React from 'react';\nimport TodoApp from './components/TodoApp/TodoApp';\n\nfunction App() {\n  return (\n    <TodoApp />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}